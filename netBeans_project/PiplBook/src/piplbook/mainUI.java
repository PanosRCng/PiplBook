/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package piplbook;

import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author panos
 */
public class mainUI extends javax.swing.JFrame
{      
    JScrollPane scrollPane;
    JList personJList;
    
    // the list with the Person object displayed
    List<Person> personsList = new ArrayList<Person>();
 
    // the Person object that holds infos about the selected entry from JList
    Person selectedPerson = null;
    // the Person object that holds infos about the most recent added entry 
    Person recentAdded = null;
    // the Person object that holds infos about the recent edited entry 
    Person recentEdited = null;    
    // the sorting type
    private String sortingType = "alphabetic";
    
    // the database handler
    DbHandler dbHandler = null;
    // the entry sorter
    Sorter sorter = null;
    // just an utils object
    Utils utils = null;
        
    /**
     * Creates new form mainUI
     */
    public mainUI()
    {   
        // showing the splash scrren for 3 seconds      
        splashScreenDelay(3000);
        
        initComponents();
        
        // set background color to white
        getContentPane().setBackground(Color.WHITE); 
        
        // set item listener to jComboBox for choosing sorting types
        jComboBox2.addItemListener(itemListener);
        
        // create a db handler and connect to database
        dbHandler = new DbHandler();
        
        // create a sorter object
        sorter = new Sorter();
        
        // create an utils object
        utils = new Utils();
        
        // if database is not initialized, set it up, else procceed with the entries' loading
        if( !dbHandler.isDbInitialized() )
        {
            dbHandler.initializedDb();
            
            utils.createDirectory("personsPhotos");
 
            BufferedImage scaledImage = null;
            
            try
            {
                scaledImage = javax.imageio.ImageIO.read(getClass().getResourceAsStream("/images/small_person.png"));
            }
            catch(Exception e)
            {
                System.err.println(e.toString());
            }
            
            String filePath = new java.io.File("").getAbsolutePath() + File.separator + "personsPhotos" + File.separator + "small_person.png";
            File photoDst = new File(filePath);    
            
            try
            {
                ImageIO.write(scaledImage, "png", photoDst);
            }
            catch(Exception e)
            {
                System.err.println(e.toString());
            }
          
            scrollPane = new JScrollPane(personJList);           
            jPanel1.add(scrollPane);
        }
        else
        {
            fillTable();
        
            // refresh recent added area;
            recentAdded();
                        
            // refresh recent added area;
            recentEdited();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Διαχείριση Πελατών");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/header.png"))); // NOI18N

        jLabel2.setBackground(new java.awt.Color(51, 51, 51));
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/footer.png"))); // NOI18N
        jLabel2.setPreferredSize(new java.awt.Dimension(1024, 30));

        jTextField1.setText("εισάγεται ένα όνομα για να αναζητήσετε ένα πελάτη");
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.jpg"))); // NOI18N

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/advancedSearch.png"))); // NOI18N
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel5MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel5MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel5MouseReleased(evt);
            }
        });

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add_person.png"))); // NOI18N
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel8MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel8MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel8MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel8MouseReleased(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/show_profil.png"))); // NOI18N
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel4MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel4MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel4MouseReleased(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/small_person.png"))); // NOI18N
        jLabel6.setText("πρόσφατη εισαγωγή");
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel6MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel6MouseExited(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel9.setText("πρόσφατη εισαγωγή");

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel10.setText("πρόσφατη επεξεργασία");

        jLabel11.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/small_person.png"))); // NOI18N
        jLabel11.setText("πρόσφατη επεξεργασία");
        jLabel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel11MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel11MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel11MouseExited(evt);
            }
        });

        jLabel13.setText("ταξινόμηση:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "αλφαβητικά", "κατά ημερομηνία εισαγωγής" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(28, 28, 28))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9)
                                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(104, 104, 104))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(332, 332, 332)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(21, 21, 21))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel8MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseReleased
        // get the component of this evtent
        JLabel myLabel = (JLabel) evt.getComponent();

        //change the jLabel's icon
        try
        {
            myLabel.setIcon( new ImageIcon( javax.imageio.ImageIO.read(getClass().getResourceAsStream("/images/add_person.png")) ) );
        }
        catch(Exception e)
        {
            System.err.println(e.toString());
        }
            
        addEntryUI();
    }//GEN-LAST:event_jLabel8MouseReleased

    private void jLabel8MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MousePressed
        // get the component of this evtent
        JLabel myLabel = (JLabel) evt.getComponent();

        //change the jLabel's icon
        try
        {
            myLabel.setIcon( new ImageIcon( javax.imageio.ImageIO.read(getClass().getResourceAsStream("/images/add_person_selected.png")) ) );
        }
        catch(Exception e)
        {
            System.err.println(e.toString());
        }
    }//GEN-LAST:event_jLabel8MousePressed

    private void jLabel4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MousePressed
        // get the component of this evtent
        JLabel myLabel = (JLabel) evt.getComponent();

        //change the jLabel's icon
        try
        {
            myLabel.setIcon( new ImageIcon( javax.imageio.ImageIO.read(getClass().getResourceAsStream("/images/show_profil_selected.png")) ) );
        }
        catch(Exception e)
        {
            System.err.println(e.toString());
        }
    }//GEN-LAST:event_jLabel4MousePressed

    private void jLabel4MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseReleased
        // get the component of this evtent
        JLabel myLabel = (JLabel) evt.getComponent();

        //change the jLabel's icon
        try
        {
            myLabel.setIcon( new ImageIcon( javax.imageio.ImageIO.read(getClass().getResourceAsStream("/images/show_profil.png")) ) );
        }
        catch(Exception e)
        {
            System.err.println(e.toString());
        }
        
        showProfileUI();
    }//GEN-LAST:event_jLabel4MouseReleased

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        if(recentAdded != null)
        {
            ProfileUI profileUI = new ProfileUI(this, recentAdded);
            profileUI.setVisible(true);
        }
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseClicked
        if(personsList.size() > 0)
        {
            ProfileUI profileUI = new ProfileUI(this, recentEdited);
            profileUI.setVisible(true);
        }
    }//GEN-LAST:event_jLabel11MouseClicked

    private void jLabel6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseEntered
        // get the component of this evtent
        JLabel myLabel = (JLabel) evt.getComponent();
        
        Border border = LineBorder.createGrayLineBorder();
        
        // set a line border to display it clickable
        myLabel.setBorder(border);
    }//GEN-LAST:event_jLabel6MouseEntered

    private void jLabel6MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseExited
        // get the component of this evtent
        JLabel myLabel = (JLabel) evt.getComponent();
        
        // remove lineBorder
        myLabel.setBorder(null);
    }//GEN-LAST:event_jLabel6MouseExited

    private void jLabel11MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseEntered
        // get the component of this evtent
        JLabel myLabel = (JLabel) evt.getComponent();
        
        Border border = LineBorder.createGrayLineBorder();
        
        // set a line border to display it clickable
        myLabel.setBorder(border);
    }//GEN-LAST:event_jLabel11MouseEntered

    private void jLabel11MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseExited
        // get the component of this evtent
        JLabel myLabel = (JLabel) evt.getComponent();
        
        // remove lineBorder
        myLabel.setBorder(null);
    }//GEN-LAST:event_jLabel11MouseExited

    private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
        jTextField1.setText("");
    }//GEN-LAST:event_jTextField1MouseClicked

    private void jLabel5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MousePressed
        // get the component of this evtent
        JLabel myLabel = (JLabel) evt.getComponent();

        //change the jLabel's icon
        try
        {
            myLabel.setIcon( new ImageIcon( javax.imageio.ImageIO.read(getClass().getResourceAsStream("/images/advancedSearch_selected.png")) ) );
        }
        catch(Exception e)
        {
            System.err.println(e.toString());
        }
    }//GEN-LAST:event_jLabel5MousePressed

    private void jLabel5MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseReleased
        // get the component of this evtent
        JLabel myLabel = (JLabel) evt.getComponent();

        //change the jLabel's icon
        try
        {
            myLabel.setIcon( new ImageIcon( javax.imageio.ImageIO.read(getClass().getResourceAsStream("/images/advancedSearch.png")) ) );
        }
        catch(Exception e)
        {
            System.err.println(e.toString());
        }
        
        AdvancedSearchUI advancedUI = new AdvancedSearchUI(this);
        advancedUI.setVisible(true);
    }//GEN-LAST:event_jLabel5MouseReleased

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        personsList.clear();
        String searchText = jTextField1.getText();
        liveLoadEntries(searchText);
        refreshTable();
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jLabel5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseEntered
        // get the component of this evtent
        JLabel myLabel = (JLabel) evt.getComponent();

        //change the jLabel's icon
        try
        {
            myLabel.setIcon( new ImageIcon( javax.imageio.ImageIO.read(getClass().getResourceAsStream("/images/advancedSearch_mouseOn.png")) ) );
        }
        catch(Exception e)
        {
            System.err.println(e.toString());
        }
    }//GEN-LAST:event_jLabel5MouseEntered

    private void jLabel5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseExited
        // get the component of this evtent
        JLabel myLabel = (JLabel) evt.getComponent();

        //change the jLabel's icon
        try
        {
            myLabel.setIcon( new ImageIcon( javax.imageio.ImageIO.read(getClass().getResourceAsStream("/images/advancedSearch.png")) ) );
        }
        catch(Exception e)
        {
            System.err.println(e.toString());
        }
    }//GEN-LAST:event_jLabel5MouseExited

    private void jLabel8MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseEntered
        // get the component of this evtent
        JLabel myLabel = (JLabel) evt.getComponent();

        //change the jLabel's icon
        try
        {
            myLabel.setIcon( new ImageIcon( javax.imageio.ImageIO.read(getClass().getResourceAsStream("/images/add_person_mouseOn.png")) ) );
        }
        catch(Exception e)
        {
            System.err.println(e.toString());
        }
    }//GEN-LAST:event_jLabel8MouseEntered

    private void jLabel8MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseExited
         // get the component of this evtent
        JLabel myLabel = (JLabel) evt.getComponent();

        //change the jLabel's icon
        try
        {
            myLabel.setIcon( new ImageIcon( javax.imageio.ImageIO.read(getClass().getResourceAsStream("/images/add_person.png")) ) );
        }
        catch(Exception e)
        {
            System.err.println(e.toString());
        }
    }//GEN-LAST:event_jLabel8MouseExited

    private void jLabel4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseEntered
        // get the component of this evtent
        JLabel myLabel = (JLabel) evt.getComponent();

        //change the jLabel's icon
        try
        {
            myLabel.setIcon( new ImageIcon( javax.imageio.ImageIO.read(getClass().getResourceAsStream("/images/show_profil_mouseOn.png")) ) );
        }
        catch(Exception e)
        {
            System.err.println(e.toString());
        }
    }//GEN-LAST:event_jLabel4MouseEntered

    private void jLabel4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseExited
        // get the component of this evtent
        JLabel myLabel = (JLabel) evt.getComponent();

        //change the jLabel's icon
        try
        {
            myLabel.setIcon( new ImageIcon( javax.imageio.ImageIO.read(getClass().getResourceAsStream("/images/show_profil.png")) ) );
        }
        catch(Exception e)
        {
            System.err.println(e.toString());
        }
    }//GEN-LAST:event_jLabel4MouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    // delay #milliSeconds for the splash screen 
    private void splashScreenDelay(int milliSeconds)
    {
        try
        {
            Thread.sleep(milliSeconds);
        }
        catch(InterruptedException ex)
        {
            Thread.currentThread().interrupt();
        }
    }
                
    public void refreshWindow()
    {
        personsList.clear();
        selectedPerson = null;
        String query = "select * from persons";
        personsList = dbHandler.loadEntries(query);

        // refresh displayed  entries
        refreshTable();
        
        // refresh recent added area;
        recentAdded();
                        
        // refresh recent added area;
        recentEdited();
    }
    
    // refresh the displayed entries
    private void refreshTable()
    {            
        personsList = sorter.sortEntries(personsList, sortingType);
        
        Person[] personArray = new Person[ personsList.size() ];
        personsList.toArray( personArray );
        
        PersonCollection collection = new PersonCollection(personArray);
        PersonListModel listModel = new PersonListModel(collection);
        
        personJList = new JList(listModel);
        
        personJList.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent lse)
            {
                if (!lse.getValueIsAdjusting())
                {                    
                    int i = personJList.getSelectedIndex();

                    selectedPerson = (Person) personJList.getModel().getElementAt(i);
                }
            }
        });
        
        personJList.setCellRenderer(new PersonCellRenderer());
        
        scrollPane.setViewportView(personJList);
    }
    
    // fill display scroll with entries
    private void fillTable()
    {     
        String query = "select * from persons";
        personsList = dbHandler.loadEntries(query);
        
        personsList = sorter.sortEntries(personsList, sortingType);
            
        Person[] personArray = new Person[ personsList.size() ];
        personsList.toArray( personArray );
            
        PersonCollection collection = new PersonCollection(personArray);
        PersonListModel listModel = new PersonListModel(collection);
        personJList = new JList(listModel);   
        
        personJList.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent lse)
            {
                if (!lse.getValueIsAdjusting())
                {                    
                    int i = personJList.getSelectedIndex();

                    selectedPerson = (Person) personJList.getModel().getElementAt(i);
                }
            }
        });
        
        personJList.setCellRenderer(new PersonCellRenderer());
            
        scrollPane = new JScrollPane(personJList);           
        jPanel1.add(scrollPane);
    }
       
    // open new jframe to add a new entry
    private void addEntryUI()
    {
        AddUI addUI = new AddUI(this);
        addUI.setVisible(true);
    }
    
    private void showProfileUI()
    {
        if(selectedPerson != null)
        {
            ProfileUI profileUI = new ProfileUI(this, selectedPerson);
            profileUI.setVisible(true);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Επιλέξτε ένα πελάτη από την λίστα πελατών", "Δεν έχει επιλεγεί πελάτης", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    // jComboBox item listener
    ItemListener itemListener = new ItemListener()
    {
        @Override
        public void itemStateChanged(ItemEvent itemEvent)
        {
            int state = itemEvent.getStateChange();
            
            if( (state == ItemEvent.SELECTED) )
            {
                if( itemEvent.getItem().equals("κατά ημερομηνία εισαγωγής") )
                {   
                    sortingType = "byDate";
                    personsList = sorter.sortEntries(personsList, sortingType);
                }
                else if( itemEvent.getItem().equals("αλφαβητικά") )
                {           
                    sortingType = "alphabetic";
                    personsList = sorter.sortEntries(personsList, sortingType);
                }
                
                if(personsList.size() > 0)
                {
                    Person[] personArray = new Person[ personsList.size() ];
                    personsList.toArray( personArray );
        
                    PersonCollection collection = new PersonCollection(personArray);
                    PersonListModel listModel = new PersonListModel(collection);
        
                    personJList = new JList(listModel);
        
                    personJList.addListSelectionListener(new ListSelectionListener() {

                        @Override
                        public void valueChanged(ListSelectionEvent lse)
                        {
                            if (!lse.getValueIsAdjusting())
                            {                    
                                int i = personJList.getSelectedIndex();

                                selectedPerson = (Person) personJList.getModel().getElementAt(i);
                            }
                        }
                    });
        
                    personJList.setCellRenderer(new PersonCellRenderer());
        
                    scrollPane.setViewportView(personJList);
                }
            }
        }
    };
    
    private void recentAdded()
    {
        if(personsList.size() > 0)
        {
            List<Person> tmpList = personsList;
        
            Collections.sort(tmpList, new byDateComparator());  
            recentAdded = tmpList.get(0);
              
            jLabel6.setText(recentAdded.getLastName() + " " + recentAdded.getFirstName());
        
            Image in = Toolkit.getDefaultToolkit().createImage(recentAdded.getImagePath());
            Image scaledImage = in.getScaledInstance(40,-1,Image.SCALE_FAST);
            ImageIcon scaledImageIcon = new ImageIcon(scaledImage);
            jLabel6.setIcon(scaledImageIcon);
        }
        else
        {
            recentAdded = null;
            
            jLabel6.setText("πρόσφατη εγγραφή");
        
            Image in = Toolkit.getDefaultToolkit().createImage(File.separator + "images" + File.separator + "small_person.png");
            Image scaledImage = in.getScaledInstance(40,-1,Image.SCALE_FAST);
            ImageIcon scaledImageIcon = new ImageIcon(scaledImage);
            jLabel6.setIcon(scaledImageIcon);           
        }
    }
    
    private void recentEdited()
    {
        if(personsList.size() > 0)
        {
            List<Person> tmpList = personsList;
        
            Collections.sort(tmpList, new byDateEditedComparator());  
            recentEdited = tmpList.get(0);
        
            jLabel11.setText(recentEdited.getLastName() + " " + recentEdited.getFirstName());

            Image in = Toolkit.getDefaultToolkit().createImage(recentEdited.getImagePath());
            Image scaledImage = in.getScaledInstance(40,-1,Image.SCALE_FAST);
            ImageIcon scaledImageIcon = new ImageIcon(scaledImage);
            jLabel11.setIcon(scaledImageIcon);
        }
        else
        {
            recentEdited = null;
            
            jLabel11.setText("πρόσφατη επεξεργασία");
        
            Image in = Toolkit.getDefaultToolkit().createImage(File.separator + "images" + File.separator + "small_person.png");
            Image scaledImage = in.getScaledInstance(40,-1,Image.SCALE_FAST);
            ImageIcon scaledImageIcon = new ImageIcon(scaledImage);
            jLabel11.setIcon(scaledImageIcon); 
        }
    }
            
    // call every time the user presses a key in the search field
    private void liveLoadEntries(String searchText)
    {        
        String first="";
        String last="";
        
        String query="select * from persons";
     
        if( (searchText.length()==0) || (searchText.length()>256) )
        {   
            query = "select * from persons";
        }
        else if( searchText.contains(" ") )
        {            
            String[] parts = searchText.split(" ");
                    
            if( parts.length==2 )
            {
                first = parts[0];
                last = parts[1];
                
                query = "select * from persons where lastName like '%" + first + "%' and firstName like '%" + last + "%' ";
            }
            else
            {
                first = searchText.trim();
                
                query = "select * from persons where lastName like '%" + first + "%' or firstName like '%" + first + "%' ";         
            }
        }
        else
        {            
            query = "select * from persons where lastName like '%" + searchText + "%' or firstName like '%" + searchText + "%' ";
        }
        
        personsList = dbHandler.loadEntries(query);
    }
    
}

